<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibNbt</name>
    </assembly>
    <members>
        <member name="T:LibNbt.NbtTag">
            <summary> Base class for different kinds of named binary tags. </summary>
        </member>
        <member name="M:LibNbt.NbtTag.GetCanonicalTagName(LibNbt.NbtTagType)">
            <summary> Returns a canonical (Notchy) name for the given NbtTagType,
            e.g. "TAG_Byte_Array" for NbtTagType.ByteArray </summary>
            <param name="type"> NbtTagType to name. </param>
            <returns> String representing the canonical name of a tag,
            or null of given TagType does not have a canonical name (e.g. Unknown). </returns>
        </member>
        <member name="M:LibNbt.NbtTag.ToString(System.String)">
            <summary> Prints contents of this tag, and any child tags, to a string.
            Indents the string using multiples of the given indentation string. </summary>
            <param name="indentString"> String to be used for indentation. </param>
            <returns> A string representing contants of this tag, and all child tags (if any). </returns>
            <exception cref="T:System.ArgumentNullException"> identString is null. </exception>
        </member>
        <member name="P:LibNbt.NbtTag.TagType">
            <summary> Type of this tag. </summary>
        </member>
        <member name="P:LibNbt.NbtTag.Name">
            <summary> Name of this tag. Immutable, and set by the constructor. May be null. </summary>
        </member>
        <member name="P:LibNbt.NbtTag.Item(System.String)">
            <summary> Gets or sets the tag with the specified name. May return null. </summary>
            <returns> The tag with the specified key. Null if tag with the given name was not found. </returns>
            <param name="tagName"> The name of the tag to get or set. Must match tag's actual name. </param>
            <exception cref="T:System.InvalidOperationException"> If used on a tag that is not NbtCompound. </exception>
            <remarks> ONLY APPLICABLE TO NntCompound OBJECTS!
            Included in NbtTag base class for programmers' convenience, to avoid extra type casts. </remarks>
        </member>
        <member name="P:LibNbt.NbtTag.Item(System.Int32)">
            <summary> Gets or sets the tag at the specified index. </summary>
            <returns> The tag at the specified index. </returns>
            <param name="tagIndex"> The zero-based index of the tag to get or set. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> tagIndex is not a valid index in the NbtList. </exception>
            <exception cref="T:System.ArgumentNullException"> Given tag is null. </exception>
            <exception cref="T:System.ArgumentException"> Given tag's type does not match ListType. </exception>
            <exception cref="T:System.InvalidOperationException"> If used on a tag that is not NbtList. </exception>
            <remarks> ONLY APPLICABLE TO NbtList OBJECTS!
            Included in NbtTag base class for programmers' convenience, to avoid extra type casts. </remarks>
        </member>
        <member name="P:LibNbt.NbtTag.ByteValue">
            <summary> Returns the value of this tag, cast as a byte.
            Only supported by NbtByte tags. </summary>
            <exception cref="T:System.InvalidCastException"> When used on a tag other than NbtByte. </exception>
        </member>
        <member name="P:LibNbt.NbtTag.ShortValue">
            <summary> Returns the value of this tag, cast as a short (16-bit signed integer).
            Only supported by NbtByte and NbtShort. </summary>
            <exception cref="T:System.InvalidCastException"> When used on an unsupported tag. </exception>
        </member>
        <member name="P:LibNbt.NbtTag.IntValue">
            <summary> Returns the value of this tag, cast as an int (32-bit signed integer).
            Only supported by NbtByte, NbtShort, and NbtInt. </summary>
            <exception cref="T:System.InvalidCastException"> When used on an unsupported tag. </exception>
        </member>
        <member name="P:LibNbt.NbtTag.LongValue">
            <summary> Returns the value of this tag, cast as a long (64-bit signed integer).
            Only supported by NbtByte, NbtShort, NbtInt, and NbtLong. </summary>
            <exception cref="T:System.InvalidCastException"> When used on an unsupported tag. </exception>
        </member>
        <member name="P:LibNbt.NbtTag.FloatValue">
            <summary> Returns the value of this tag, cast as a long (64-bit signed integer).
            Only supported by NbtFloat and, with loss of precision, by NbtDouble, NbtByte, NbtShort, NbtInt, and NbtLong. </summary>
            <exception cref="T:System.InvalidCastException"> When used on an unsupported tag. </exception>
        </member>
        <member name="P:LibNbt.NbtTag.DoubleValue">
            <summary> Returns the value of this tag, cast as a long (64-bit signed integer).
            Only supported by NbtFloat, NbtDouble, and, with loss of precision, by NbtByte, NbtShort, NbtInt, and NbtLong. </summary>
            <exception cref="T:System.InvalidCastException"> When used on an unsupported tag. </exception>
        </member>
        <member name="P:LibNbt.NbtTag.ByteArrayValue">
            <summary> Returns the value of this tag, cast as a byte array.
            Only supported by NbtByteArray tags. </summary>
            <exception cref="T:System.InvalidCastException"> When used on a tag other than NbtByteArray. </exception>
        </member>
        <member name="P:LibNbt.NbtTag.IntArrayValue">
            <summary> Returns the value of this tag, cast as an int array.
            Only supported by NbtIntArray tags. </summary>
            <exception cref="T:System.InvalidCastException"> When used on a tag other than NbtIntArray. </exception>
        </member>
        <member name="P:LibNbt.NbtTag.StringValue">
            <summary> Returns the value of this tag, cast as a string.
            Returns exact value for NbtString, and stringified (using InvariantCulture) value for NbtByte, NbtDouble, NbtFloat, NbtInt, NbtLong, and NbtShort.
            Not supported by NbtCompound, NbtList, NbtByteArray, or NbtIntArray. </summary>
            <exception cref="T:System.InvalidCastException"> When used on an unsupported tag. </exception>
        </member>
        <member name="T:LibNbt.NbtFloat">
            <summary> A tag containing a single-precision floating point number. </summary>
        </member>
        <member name="M:LibNbt.NbtFloat.#ctor">
            <summary> Creates an unnamed NbtFloat tag with the default value of 0f. </summary>
        </member>
        <member name="M:LibNbt.NbtFloat.#ctor(System.Single)">
            <summary> Creates an unnamed NbtFloat tag with the given value. </summary>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:LibNbt.NbtFloat.#ctor(System.String)">
            <summary> Creates an NbtFloat tag with the given name and the default value of 0f. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
        </member>
        <member name="M:LibNbt.NbtFloat.#ctor(System.String,System.Single)">
            <summary> Creates an NbtFloat tag with the given name and value. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:LibNbt.NbtFloat.ToString">
            <summary> Returns a String that represents the current NbtFloat object.
            Format: TAG_Float("Name"): Value </summary>
            <returns> A String that represents the current NbtFloat object. </returns>
        </member>
        <member name="P:LibNbt.NbtFloat.TagType">
            <summary> Type of this tag (Float). </summary>
        </member>
        <member name="P:LibNbt.NbtFloat.Value">
            <summary> Value/payload of this tag (a single-precision floating point number). </summary>
        </member>
        <member name="T:LibNbt.NbtIntArray">
            <summary> A tag containing an array of signed 32-bit integers. </summary>
        </member>
        <member name="M:LibNbt.NbtIntArray.#ctor">
            <summary> Creates an unnamed NbtIntArray tag, containing an empty array of ints. </summary>
        </member>
        <member name="M:LibNbt.NbtIntArray.#ctor(System.Int32[])">
            <summary> Creates an unnamed NbtIntArray tag, containing the given array of ints. </summary>
            <param name="value"> Int array to assign to this tag's Value. May not be null. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="M:LibNbt.NbtIntArray.#ctor(System.String)">
            <summary> Creates an NbtIntArray tag with the given name, containing an empty array of ints. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
        </member>
        <member name="M:LibNbt.NbtIntArray.#ctor(System.String,System.Int32[])">
            <summary> Creates an NbtIntArray tag with the given name, containing the given array of ints. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
            <param name="value"> Int array to assign to this tag's Value. May not be null. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="M:LibNbt.NbtIntArray.ToString">
            <summary> Returns a String that represents the current NbtIntArray object.
            Format: TAG_Int_Array("Name"): [N ints] </summary>
            <returns> A String that represents the current NbtIntArray object. </returns>
        </member>
        <member name="P:LibNbt.NbtIntArray.TagType">
            <summary> Type of this tag (ByteArray). </summary>
        </member>
        <member name="P:LibNbt.NbtIntArray.Value">
            <summary> Value/payload of this tag (an array of signed 32-bit integers). May not be null. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="P:LibNbt.NbtIntArray.Item(System.Int32)">
            <summary> Gets or sets an integer at the given index. </summary>
            <param name="index"> The zero-based index of the element to get or set. </param>
            <returns> The integer at the specified index. </returns>
            <exception cref="T:System.IndexOutOfRangeException"> If given index was outside the array bounds. </exception>
        </member>
        <member name="T:LibNbt.NbtByteArray">
            <summary> A tag containing an array of bytes. </summary>
        </member>
        <member name="M:LibNbt.NbtByteArray.#ctor">
            <summary> Creates an unnamed NbtByte tag, containing an empty array of bytes. </summary>
        </member>
        <member name="M:LibNbt.NbtByteArray.#ctor(System.Byte[])">
            <summary> Creates an unnamed NbtByte tag, containing the given array of bytes. </summary>
            <param name="value"> Byte array to assign to this tag's Value. May not be null. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="M:LibNbt.NbtByteArray.#ctor(System.String)">
            <summary> Creates an NbtByte tag with the given name, containing an empty array of bytes. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
        </member>
        <member name="M:LibNbt.NbtByteArray.#ctor(System.String,System.Byte[])">
            <summary> Creates an NbtByte tag with the given name, containing the given array of bytes. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
            <param name="value"> Byte array to assign to this tag's Value. May not be null. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="M:LibNbt.NbtByteArray.ToString">
            <summary> Returns a String that represents the current NbtByteArray object.
            Format: TAG_Byte_Array("Name"): [N bytes] </summary>
            <returns> A String that represents the current NbtByteArray object. </returns>
        </member>
        <member name="P:LibNbt.NbtByteArray.TagType">
            <summary> Type of this tag (ByteArray). </summary>
        </member>
        <member name="P:LibNbt.NbtByteArray.Value">
            <summary> Value/payload of this tag (an array of bytes). May not be null. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="P:LibNbt.NbtByteArray.Item(System.Int32)">
            <summary> Gets or sets a byte at the given index. </summary>
            <param name="index"> The zero-based index of the element to get or set. </param>
            <returns> The byte at the specified index. </returns>
            <exception cref="T:System.IndexOutOfRangeException"> If given index was outside the array bounds. </exception>
        </member>
        <member name="T:LibNbt.NbtByte">
            <summary> A tag containing a single byte. </summary>
        </member>
        <member name="M:LibNbt.NbtByte.#ctor">
            <summary> Creates an unnamed NbtByte tag with the default value of 0. </summary>
        </member>
        <member name="M:LibNbt.NbtByte.#ctor(System.Byte)">
            <summary> Creates an unnamed NbtByte tag with the given value. </summary>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:LibNbt.NbtByte.#ctor(System.String)">
            <summary> Creates an NbtByte tag with the given name and the default value of 0. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
        </member>
        <member name="M:LibNbt.NbtByte.#ctor(System.String,System.Byte)">
            <summary> Creates an NbtByte tag with the given name and value. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:LibNbt.NbtByte.ToString">
            <summary> Returns a String that represents the current NbtByte object.
            Format: TAG_Byte("Name"): Value </summary>
            <returns> A String that represents the current NbtByte object. </returns>
        </member>
        <member name="P:LibNbt.NbtByte.TagType">
            <summary> Type of this tag (Byte). </summary>
        </member>
        <member name="P:LibNbt.NbtByte.Value">
            <summary> Value/payload of this tag (a single byte). </summary>
        </member>
        <member name="T:LibNbt.NbtFile">
            <summary> Represents a complete NBT file. </summary>
        </member>
        <member name="M:LibNbt.NbtFile.#ctor(LibNbt.NbtCompound)">
            <summary> Creates a new NBT file with the given root tag. </summary>
            <param name="rootTag"> Compound tag to set as the root tag. May be null. </param>
            <exception cref="T:System.ArgumentException"> If given rootTag is unnamed. </exception>
        </member>
        <member name="M:LibNbt.NbtFile.#ctor(System.String)">
            <summary> Loads NBT data from a file. Compression will be auto-detected. </summary>
            <param name="fileName"> Name of the file from which data will be loaded. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="fileName"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for compression. </exception>
            <exception cref="T:System.IO.FileNotFoundException"> If given file was not found. </exception>
            <exception cref="T:System.IO.EndOfStreamException"> If file ended earlier than expected. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If file compression could not be detected, or decompressing failed. </exception>
            <exception cref="T:LibNbt.NbtFormatException"> If an error occured while parsing data in NBT format. </exception>
            <exception cref="T:System.IO.IOException"> If an I/O error occurred while reading the file. </exception>
        </member>
        <member name="M:LibNbt.NbtFile.#ctor(System.String,LibNbt.NbtCompression)">
            <summary> Loads NBT data from a file. </summary>
            <param name="fileName"> Name of the file from which data will be loaded. </param>
            <param name="compression"> Compression method to use for loading/saving this file. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="fileName"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for compression. </exception>
            <exception cref="T:System.IO.FileNotFoundException"> If given file was not found. </exception>
            <exception cref="T:System.IO.EndOfStreamException"> If file ended earlier than expected. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If file compression could not be detected, or decompressing failed. </exception>
            <exception cref="T:LibNbt.NbtFormatException"> If an error occured while parsing data in NBT format. </exception>
            <exception cref="T:System.IO.IOException"> If an I/O error occurred while reading the file. </exception>
        </member>
        <member name="M:LibNbt.NbtFile.#ctor(System.IO.Stream,LibNbt.NbtCompression)">
            <summary> Loads NBT data from a stream. </summary>
            <param name="stream"> Stream from which data will be loaded. If compression is set to AutoDetect, this stream must support seeking. </param>
            <param name="compression"> Compression method to use for loading/saving this file. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stream"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for compression. </exception>
            <exception cref="T:System.IO.FileNotFoundException"> If given file was not found. </exception>
            <exception cref="T:System.NotSupportedException"> If compression is set to AutoDetect, but the stream is not seekable. </exception>
            <exception cref="T:System.IO.EndOfStreamException"> If file ended earlier than expected. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If file compression could not be detected, decompressing failed, or given stream does not support reading. </exception>
            <exception cref="T:LibNbt.NbtFormatException"> If an error occured while parsing data in NBT format. </exception>
        </member>
        <member name="M:LibNbt.NbtFile.LoadFromFile(System.String)">
            <summary> Loads NBT data from a file. Existing RootTag will be replaced. Compression will be auto-detected. </summary>
            <param name="fileName"> Name of the file from which data will be loaded. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="fileName"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for compression. </exception>
            <exception cref="T:System.IO.FileNotFoundException"> If given file was not found. </exception>
            <exception cref="T:System.IO.EndOfStreamException"> If file ended earlier than expected. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If file compression could not be detected, or decompressing failed. </exception>
            <exception cref="T:LibNbt.NbtFormatException"> If an error occured while parsing data in NBT format. </exception>
            <exception cref="T:System.IO.IOException"> If an I/O error occurred while reading the file. </exception>
        </member>
        <member name="M:LibNbt.NbtFile.LoadFromFile(System.String,LibNbt.NbtCompression)">
            <summary> Loads NBT data from a file. Existing RootTag will be replaced. </summary>
            <param name="fileName"> Name of the file from which data will be loaded. </param>
            <param name="compression"> Compression method to use for loading/saving this file. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="fileName"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for compression. </exception>
            <exception cref="T:System.IO.FileNotFoundException"> If given file was not found. </exception>
            <exception cref="T:System.IO.EndOfStreamException"> If file ended earlier than expected. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If file compression could not be detected, or decompressing failed. </exception>
            <exception cref="T:LibNbt.NbtFormatException"> If an error occured while parsing data in NBT format. </exception>
            <exception cref="T:System.IO.IOException"> If an I/O error occurred while reading the file. </exception>
        </member>
        <member name="M:LibNbt.NbtFile.LoadFromStream(System.IO.Stream,LibNbt.NbtCompression)">
            <summary> Loads NBT data from a stream. Existing RootTag will be replaced </summary>
            <param name="stream"> Stream from which data will be loaded. If compression is set to AutoDetect, this stream must support seeking. </param>
            <param name="compression"> Compression method to use for loading/saving this file. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stream"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for compression. </exception>
            <exception cref="T:System.IO.FileNotFoundException"> If given file was not found. </exception>
            <exception cref="T:System.NotSupportedException"> If compression is set to AutoDetect, but the stream is not seekable. </exception>
            <exception cref="T:System.IO.EndOfStreamException"> If file ended earlier than expected. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If file compression could not be detected, decompressing failed, or given stream does not support reading. </exception>
            <exception cref="T:LibNbt.NbtFormatException"> If an error occured while parsing data in NBT format. </exception>
        </member>
        <member name="M:LibNbt.NbtFile.SaveToFile(System.String,LibNbt.NbtCompression)">
            <summary> Saves this NBT file to a stream. Nothing is written to stream if RootTag is null. </summary>
            <param name="fileName"> File to write data to. May not be null. </param>
            <param name="compression"> Compression mode to use for saving. May not be AutoDetect. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="fileName"/> is null. </exception>
            <exception cref="T:System.ArgumentException"> If AutoDetect was given as the compression mode. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for compression. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If given stream does not support writing. </exception>
            <exception cref="T:System.IO.IOException"> If an I/O error occurred while creating the file. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> Specified file is read-only, or a permission issue occurred. </exception>
            <exception cref="T:LibNbt.NbtFormatException"> If one of the NbtCompound tags contained unnamed tags;
            or if an NbtList tag had Unknown list type and no elements. </exception>
        </member>
        <member name="M:LibNbt.NbtFile.SaveToStream(System.IO.Stream,LibNbt.NbtCompression)">
            <summary> Saves this NBT file to a stream. Nothing is written to stream if RootTag is null. </summary>
            <param name="stream"> Stream to write data to. May not be null. </param>
            <param name="compression"> Compression mode to use for saving. May not be AutoDetect. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stream"/> is null. </exception>
            <exception cref="T:System.ArgumentException"> If AutoDetect was given as the compression mode. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for compression. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If given stream does not support writing. </exception>
            <exception cref="T:LibNbt.NbtFormatException"> If one of the NbtCompound tags contained unnamed tags;
            or if an NbtList tag had Unknown list type and no elements. </exception>
        </member>
        <member name="P:LibNbt.NbtFile.FileName">
            <summary> Gets the file name used for most recent loading/saving of this file.
            May be null, if this NbtFile instance has not been loaded from, or saved to, a file. </summary>
        </member>
        <member name="P:LibNbt.NbtFile.FileCompression">
            <summary> Gets the compression method used for most recent loading/saving of this file.
            Defaults to AutoDetect. </summary>
        </member>
        <member name="P:LibNbt.NbtFile.RootTag">
            <summary> Root tag of this file. Must be a named CompoundTag. Defaults to null. </summary>
            <exception cref="T:System.ArgumentException"> If given tag is unnamed. </exception>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary> Indicates that method doesn't contain observable side effects. </summary>
        </member>
        <member name="T:LibNbt.NbtTagType">
            <summary> Enumeration of named binary tag types, and their corresponding codes. </summary>
        </member>
        <member name="F:LibNbt.NbtTagType.Unknown">
            <summary> Placeholder TagType used to indicate unknown/undefined tag type in NbtList. </summary>
        </member>
        <member name="F:LibNbt.NbtTagType.End">
            <summary> TAG_End: This unnamed tag serves no purpose but to signify the end of an open TAG_Compound. </summary>
        </member>
        <member name="F:LibNbt.NbtTagType.Byte">
            <summary> TAG_Byte: A single byte. </summary>
        </member>
        <member name="F:LibNbt.NbtTagType.Short">
            <summary> TAG_Short: A single signed 16-bit integer. </summary>
        </member>
        <member name="F:LibNbt.NbtTagType.Int">
            <summary> TAG_Int: A single signed 32-bit integer. </summary>
        </member>
        <member name="F:LibNbt.NbtTagType.Long">
            <summary> TAG_Long: A single signed 64-bit integer. </summary>
        </member>
        <member name="F:LibNbt.NbtTagType.Float">
            <summary> TAG_Float: A single IEEE-754 single-precision floating point number. </summary>
        </member>
        <member name="F:LibNbt.NbtTagType.Double">
            <summary> TAG_Double: A single IEEE-754 double-precision floating point number. </summary>
        </member>
        <member name="F:LibNbt.NbtTagType.ByteArray">
            <summary> TAG_Byte_Array: A length-prefixed array of bytes. </summary>
        </member>
        <member name="F:LibNbt.NbtTagType.String">
            <summary> TAG_String: A length-prefixed UTF-8 string. </summary>
        </member>
        <member name="F:LibNbt.NbtTagType.List">
            <summary> TAG_List: A list of nameless tags, all of the same type. </summary>
        </member>
        <member name="F:LibNbt.NbtTagType.Compound">
            <summary> TAG_Compound: A set of named tags. </summary>
        </member>
        <member name="F:LibNbt.NbtTagType.IntArray">
            <summary> TAG_Byte_Array: A length-prefixed array of signed 32-bit integers. </summary>
        </member>
        <member name="T:LibNbt.NbtShort">
            <summary> A tag containing a single signed 16-bit integer. </summary>
        </member>
        <member name="M:LibNbt.NbtShort.#ctor">
            <summary> Creates an unnamed NbtShort tag with the default value of 0. </summary>
        </member>
        <member name="M:LibNbt.NbtShort.#ctor(System.Int16)">
            <summary> Creates an unnamed NbtShort tag with the given value. </summary>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:LibNbt.NbtShort.#ctor(System.String)">
            <summary> Creates an NbtShort tag with the given name and the default value of 0. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
        </member>
        <member name="M:LibNbt.NbtShort.#ctor(System.String,System.Int16)">
            <summary> Creates an NbtShort tag with the given name and value. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:LibNbt.NbtShort.ToString">
            <summary> Returns a String that represents the current NbtShort object.
            Format: TAG_Short("Name"): Value </summary>
            <returns> A String that represents the current NbtShort object. </returns>
        </member>
        <member name="P:LibNbt.NbtShort.TagType">
            <summary> Type of this tag (Short). </summary>
        </member>
        <member name="P:LibNbt.NbtShort.Value">
            <summary> Value/payload of this tag (a single signed 16-bit integer). </summary>
        </member>
        <member name="T:LibNbt.NbtDouble">
            <summary> A tag containing a double-precision floating point number. </summary>
        </member>
        <member name="M:LibNbt.NbtDouble.#ctor">
            <summary> Creates an unnamed NbtDouble tag with the default value of 0. </summary>
        </member>
        <member name="M:LibNbt.NbtDouble.#ctor(System.Double)">
            <summary> Creates an unnamed NbtDouble tag with the given value. </summary>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:LibNbt.NbtDouble.#ctor(System.String)">
            <summary> Creates an NbtDouble tag with the given name and the default value of 0. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
        </member>
        <member name="M:LibNbt.NbtDouble.#ctor(System.String,System.Double)">
            <summary> Creates an NbtDouble tag with the given name and value. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:LibNbt.NbtDouble.ToString">
            <summary> Returns a String that represents the current NbtDouble object.
            Format: TAG_Double("Name"): Value </summary>
            <returns> A String that represents the current NbtDouble object. </returns>
        </member>
        <member name="P:LibNbt.NbtDouble.TagType">
            <summary> Type of this tag (Double). </summary>
        </member>
        <member name="P:LibNbt.NbtDouble.Value">
            <summary> Value/payload of this tag (a double-precision floating point number). </summary>
        </member>
        <member name="T:LibNbt.NbtInt">
            <summary> A tag containing a single signed 32-bit integer. </summary>
        </member>
        <member name="M:LibNbt.NbtInt.#ctor">
            <summary> Creates an unnamed NbtInt tag with the default value of 0. </summary>
        </member>
        <member name="M:LibNbt.NbtInt.#ctor(System.Int32)">
            <summary> Creates an unnamed NbtInt tag with the given value. </summary>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:LibNbt.NbtInt.#ctor(System.String)">
            <summary> Creates an NbtInt tag with the given name and the default value of 0. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
        </member>
        <member name="M:LibNbt.NbtInt.#ctor(System.String,System.Int32)">
            <summary> Creates an NbtInt tag with the given name and value. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:LibNbt.NbtInt.ToString">
            <summary> Returns a String that represents the current NbtInt object.
            Format: TAG_Int("Name"): Value </summary>
            <returns> A String that represents the current NbtInt object. </returns>
        </member>
        <member name="P:LibNbt.NbtInt.TagType">
            <summary> Type of this tag (Int). </summary>
        </member>
        <member name="P:LibNbt.NbtInt.Value">
            <summary> Value/payload of this tag (a single signed 32-bit integer). </summary>
        </member>
        <member name="T:LibNbt.NbtString">
            <summary> A tag containing a single string. String is stored in UTF-8 encoding. </summary>
        </member>
        <member name="M:LibNbt.NbtString.#ctor">
            <summary> Creates an unnamed NbtString tag with the default value (empty string). </summary>
        </member>
        <member name="M:LibNbt.NbtString.#ctor(System.String)">
            <summary> Creates an unnamed NbtString tag with the given value. </summary>
            <param name="value"> String value to assign to this tag. May not be null. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="M:LibNbt.NbtString.#ctor(System.String,System.String)">
            <summary> Creates an NbtString tag with the given name and value. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
            <param name="value"> String value to assign to this tag. May not be null. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="M:LibNbt.NbtString.ToString">
            <summary> Returns a String that represents the current NbtString object.
            Format: TAG_String("Name"): Value </summary>
            <returns> A String that represents the current NbtString object. </returns>
        </member>
        <member name="P:LibNbt.NbtString.TagType">
            <summary> Type of this tag (String). </summary>
        </member>
        <member name="P:LibNbt.NbtString.Value">
            <summary> Value/payload of this tag (a single string). May not be null. </summary>
        </member>
        <member name="T:LibNbt.NbtList">
            <summary> A tag containing a list of unnamed tags, all of the same kind. </summary>
        </member>
        <member name="M:LibNbt.NbtList.#ctor">
            <summary> Creates an unnamed NbtList with empty contents and undefined ListType. </summary>
        </member>
        <member name="M:LibNbt.NbtList.#ctor(System.String)">
            <summary> Creates an NbtList with given name, empty contents, and undefined ListType. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
        </member>
        <member name="M:LibNbt.NbtList.#ctor(System.Collections.Generic.IEnumerable{LibNbt.NbtTag})">
            <summary> Creates an unnamed NbtList with the given contents, and inferred ListType. 
            If given tag array is empty, NbtTagType remains Unknown. </summary>
            <param name="tags"> Collection of tags to insert into the list. All tags are expected to be of the same type.
            ListType is inferred from the first tag. List may be empty, but may not be null. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tags"/> is null. </exception>
            <exception cref="T:System.ArgumentException"> If given tags are of mixed types. </exception>
        </member>
        <member name="M:LibNbt.NbtList.#ctor(LibNbt.NbtTagType)">
            <summary> Creates an unnamed NbtList with empty contents and an explicitly specified ListType.
            If ListType is Unknown, it will be inferred from the type of the first added tag.
            Otherwise, all tags added to this list are expected to be of the given type. </summary>
            <param name="givenListType"> Name to assign to this tag. May be Unknown. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> If the given NbtTagType is not among recognized tag types. </exception>
        </member>
        <member name="M:LibNbt.NbtList.#ctor(System.String,System.Collections.Generic.IEnumerable{LibNbt.NbtTag})">
            <summary> Creates an NbtList with the given name and contents, and inferred ListType. 
            If given tag array is empty, NbtTagType remains Unknown. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
            <param name="tags"> Collection of tags to insert into the list. All tags are expected to be of the same type.
            ListType is inferred from the first tag. List may be empty, but may not be null. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tags"/> is null. </exception>
            <exception cref="T:System.ArgumentException"> If given tags are of mixed types. </exception>
        </member>
        <member name="M:LibNbt.NbtList.#ctor(System.Collections.Generic.IEnumerable{LibNbt.NbtTag},LibNbt.NbtTagType)">
            <summary> Creates an unnamed NbtList with the given contents, and an explicitly specified ListType. </summary>
            <param name="tags"> Collection of tags to insert into the list.
            All tags are expected to be of the same type (matching givenListType).
            List may be empty, but may not be null. </param>
            <param name="givenListType"> Name to assign to this tag. May be Unknown (to infer type from the first element of tags). </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tags"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If the given NbtTagType is not among recognized tag types. </exception>
            <exception cref="T:System.ArgumentException"> If given tags do not match givenListType, or are of mixed types. </exception>
        </member>
        <member name="M:LibNbt.NbtList.#ctor(System.String,LibNbt.NbtTagType)">
            <summary> Creates an NbtList with the given name, empty contents, and an explicitly specified ListType. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
            <param name="givenListType"> Name to assign to this tag.
            If givenListType is Unknown, ListType will be infered from the first tag added to this NbtList. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> If the given NbtTagType is not among recognized tag types. </exception>
        </member>
        <member name="M:LibNbt.NbtList.#ctor(System.String,System.Collections.Generic.IEnumerable{LibNbt.NbtTag},LibNbt.NbtTagType)">
            <summary> Creates an NbtList with the given name and contents, and an explicitly specified ListType. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
            <param name="tags"> Collection of tags to insert into the list.
            All tags are expected to be of the same type (matching givenListType). May be empty or null. </param>
            <param name="givenListType"> Name to assign to this tag. May be Unknown (to infer type from the first element of tags). </param>
            <exception cref="T:System.ArgumentException"> If given tags do not match givenListType, or are of mixed types. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If the given NbtTagType is not among recognized tag types. </exception>
        </member>
        <member name="M:LibNbt.NbtList.Get``1(System.Int32)">
            <summary> Gets or sets the tag with the specified name. </summary>
            <param name="tagIndex"> The zero-based index of the tag to get or set. </param>
            <typeparam name="T"> Type to cast the result to. Must derive from NbtTag. </typeparam>
            <returns> The tag with the specified key. </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> tagIndex is not a valid index in the NbtList. </exception>
            <exception cref="T:System.InvalidCastException"> If tag could not be cast to the desired tag. </exception>
        </member>
        <member name="M:LibNbt.NbtList.AddRange(System.Collections.Generic.IEnumerable{LibNbt.NbtTag})">
            <summary> Adds all tags from the specified collection to the end of this NbtList. </summary>
            <param name="newTags"> The collection whose elements should be added to this NbtList. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="newTags"/> is null. </exception>
            <exception cref="T:System.ArgumentException"> If given tags do not match ListType, or are of mixed types. </exception>
        </member>
        <member name="M:LibNbt.NbtList.ToArray">
            <summary> Copies all tags in this NbtList to an array. </summary>
            <returns> Array of NbtTags. </returns>
        </member>
        <member name="M:LibNbt.NbtList.ToArray``1">
            <summary> Copies all tags in this NbtList to an array, and casts it to the desired type. </summary>
            <typeparam name="T"> Type to cast every member of NbtList to. Must derive from NbtTag. </typeparam>
            <returns> Array of NbtTags cast to the desired type. </returns>
            <exception cref="T:System.InvalidCastException"> If contents of this list cannot be cast to the given type. </exception>
        </member>
        <member name="M:LibNbt.NbtList.GetEnumerator">
            <summary> Returns an enumerator that iterates through all tags in this NbtList. </summary>
            <returns> An IEnumerator&gt;NbtTag&lt; that can be used to iterate through the list. </returns>
        </member>
        <member name="M:LibNbt.NbtList.IndexOf(LibNbt.NbtTag)">
            <summary> Determines the index of a specific tag in this NbtList </summary>
            <returns> The index of tag if found in the list; otherwise, -1. </returns>
            <param name="tag"> The tag to locate in this NbtList. </param>
        </member>
        <member name="M:LibNbt.NbtList.Insert(System.Int32,LibNbt.NbtTag)">
            <summary> Inserts an item to this NbtList at the specified index. </summary>
            <param name="index"> The zero-based index at which newTag should be inserted. </param>
            <param name="newTag"> The tag to insert into this NbtList. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> index is not a valid index in this NbtList. </exception>
        </member>
        <member name="M:LibNbt.NbtList.RemoveAt(System.Int32)">
            <summary> Removes a tag at the specified index from this NbtList. </summary>
            <param name="index"> The zero-based index of the item to remove. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> Given index is not a valid index in the NbtList. </exception>
        </member>
        <member name="M:LibNbt.NbtList.Add(LibNbt.NbtTag)">
            <summary> Adds an tag to this NbtList. </summary>
            <param name="newTag"> The tag to add to this NbtList. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="newTag"/> is null. </exception>
            <exception cref="T:System.ArgumentException"> If newTag does not match ListType. </exception>
        </member>
        <member name="M:LibNbt.NbtList.Clear">
            <summary> Removes all tags from this NbtList. </summary>
        </member>
        <member name="M:LibNbt.NbtList.Contains(LibNbt.NbtTag)">
            <summary> Determines whether this NbtList contains a specific tag. </summary>
            <returns> true if given tag is found in this NbtList; otherwise, false. </returns>
            <param name="item"> The tag to locate in this NbtList. </param>
        </member>
        <member name="M:LibNbt.NbtList.CopyTo(LibNbt.NbtTag[],System.Int32)">
            <summary> Copies the tags of this NbtList to an array, starting at a particular array index. </summary>
            <param name="array"> The one-dimensional array that is the destination of the tag copied from NbtList.
            The array must have zero-based indexing. </param>
            <param name="arrayIndex"> The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="array"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> arrayIndex is less than 0. </exception>
            <exception cref="T:System.ArgumentException"> Given array is multidimensional; arrayIndex is equal to or greater than the length of array;
            the number of tags in this NbtList is greater than the available space from arrayIndex to the end of the destination array;
            or type NbtTag cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="M:LibNbt.NbtList.Remove(LibNbt.NbtTag)">
            <summary> Removes the first occurrence of a specific NbtTag from the NbtCompound.
            Looks for exact object matches, not name matches. </summary>
            <returns> true if tag was successfully removed from this NbtList; otherwise, false.
            This method also returns false if tag is not found. </returns>
            <param name="tag"> The tag to remove from this NbtList. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tag"/> is null. </exception>
        </member>
        <member name="M:LibNbt.NbtList.ToString">
            <summary> Returns a String that represents the current NbtList object and its contents.
            Format: TAG_List("Name"): { ...contents... } </summary>
            <returns> A String that represents the current NbtList object and its contents. </returns>
        </member>
        <member name="P:LibNbt.NbtList.TagType">
            <summary> Type of this tag (List). </summary>
        </member>
        <member name="P:LibNbt.NbtList.ListType">
            <summary> Gets or sets the tag type of this list. All tags in this NbtTag must be of the same type. </summary>
            <exception cref="T:System.ArgumentException"> If the given NbtTagType does not match the type of existing list items (for non-empty lists). </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If the given NbtTagType is not among recognized tag types. </exception>
        </member>
        <member name="P:LibNbt.NbtList.Item(System.Int32)">
            <summary> Gets or sets the tag at the specified index. </summary>
            <returns> The tag at the specified index. </returns>
            <param name="tagIndex"> The zero-based index of the tag to get or set. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> tagIndex is not a valid index in the NbtList. </exception>
            <exception cref="T:System.ArgumentNullException"> Given tag is null. </exception>
            <exception cref="T:System.ArgumentException"> Given tag's type does not match ListType. </exception>
        </member>
        <member name="P:LibNbt.NbtList.Count">
            <summary> Gets the number of tags contained in the NbtList. </summary>
            <returns> The number of tags contained in the NbtList. </returns>
        </member>
        <member name="T:LibNbt.NbtCompression">
            <summary> Compression method used for loading/saving NBT files. </summary>
        </member>
        <member name="F:LibNbt.NbtCompression.AutoDetect">
            <summary> Automatically detect file compression. Not a valid format for saving. </summary>
        </member>
        <member name="F:LibNbt.NbtCompression.None">
            <summary> No compression. </summary>
        </member>
        <member name="F:LibNbt.NbtCompression.GZip">
            <summary> Compressed, with GZip header (default). </summary>
        </member>
        <member name="F:LibNbt.NbtCompression.ZLib">
            <summary> Compressed, with ZLib header (RFC-1950). </summary>
        </member>
        <member name="T:LibNbt.NbtCompound">
            <summary> A tag containing a set of other named tags. Order is not guaranteed. </summary>
        </member>
        <member name="M:LibNbt.NbtCompound.#ctor">
            <summary> Creates an empty unnamed NbtByte tag. </summary>
        </member>
        <member name="M:LibNbt.NbtCompound.#ctor(System.String)">
            <summary> Creates an empty NbtByte tag with the given name. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
        </member>
        <member name="M:LibNbt.NbtCompound.#ctor(System.Collections.Generic.IEnumerable{LibNbt.NbtTag})">
            <summary> Creates an unnamed NbtByte tag, containing the given tags. </summary>
            <param name="tags"> Collection of tags to assign to this tag's Value. May not be null </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tags"/> is null, or one of the tags is null. </exception>
            <exception cref="T:System.ArgumentException"> If some of the given tags were not named, or two tags with the same name were given. </exception>
        </member>
        <member name="M:LibNbt.NbtCompound.#ctor(System.String,System.Collections.Generic.IEnumerable{LibNbt.NbtTag})">
            <summary> Creates an NbtByte tag with the given name, containing the given tags. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
            <param name="tags"> Collection of tags to assign to this tag's Value. May not be null </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tags"/> is null, or one of the tags is null. </exception>
            <exception cref="T:System.ArgumentException"> If some of the given tags were not named, or two tags with the same name were given. </exception>
        </member>
        <member name="M:LibNbt.NbtCompound.Get``1(System.String)">
            <summary> Gets or sets the tag with the specified name. May return null. </summary>
            <param name="tagName"> The name of the tag to get. </param>
            <typeparam name="T"> Type to cast the result to. Must derive from NbtTag. </typeparam>
            <returns> The tag with the specified key. Null if tag with the given name was not found. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> is null. </exception>
            <exception cref="T:System.InvalidCastException"> If tag could not be cast to the desired tag. </exception>
        </member>
        <member name="M:LibNbt.NbtCompound.ToArray">
            <summary> Copies all tags in this NbtCompound to an array. </summary>
            <returns> Array of NbtTags. </returns>
        </member>
        <member name="M:LibNbt.NbtCompound.ToNameArray">
            <summary> Copies names of all tags in this NbtCompound to an array. </summary>
            <returns> Array of strings (tag names). </returns>
        </member>
        <member name="M:LibNbt.NbtCompound.AddRange(System.Collections.Generic.IEnumerable{LibNbt.NbtTag})">
            <summary> Adds all tags from the specified collection to this NbtCompound. </summary>
            <param name="newTags"> The collection whose elements should be added to this NbtCompound. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="newTags"/> is null, or one of the tags in newTags is null. </exception>
            <exception cref="T:System.ArgumentException"> If one of the given tags was unnamed,
            or if a tag with the given name already exists in this NbtCompound. </exception>
        </member>
        <member name="M:LibNbt.NbtCompound.Contains(System.String)">
            <summary> Determines whether this NbtCompound contains a tag with a specific name. </summary>
            <param name="tagName"> Tag name to search for. May not be null. </param>
            <returns> true if a tag with given name was found; otherwise, false. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> is null. </exception>
        </member>
        <member name="M:LibNbt.NbtCompound.Remove(System.String)">
            <summary> Removes the tag with the specified name from this NbtCompound. </summary>
            <param name="tagName"> The name of the tag to remove. </param>
            <returns> true if the tag is successfully found and removed; otherwise, false.
            This method returns false if name is not found in the NbtCompound. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> is null. </exception>
        </member>
        <member name="M:LibNbt.NbtCompound.GetEnumerator">
            <summary> Returns an enumerator that iterates through all tags in this NbtCompound. </summary>
            <returns> An IEnumerator&gt;NbtTag&lt; that can be used to iterate through the collection. </returns>
        </member>
        <member name="M:LibNbt.NbtCompound.Add(LibNbt.NbtTag)">
            <summary> Adds a tag to this NbtCompound. </summary>
            <param name="newTag"> The object to add to this NbtCompound. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="newTag"/> is null. </exception>
            <exception cref="T:System.ArgumentException"> If the given tag is unnamed;
            or if a tag with the given name already exists in this NbtCompound. </exception>
        </member>
        <member name="M:LibNbt.NbtCompound.Clear">
            <summary> Removes all tags from this NbtCompound. </summary>
        </member>
        <member name="M:LibNbt.NbtCompound.Contains(LibNbt.NbtTag)">
            <summary> Determines whether this NbtCompound contains a specific NbtTag.
            Looks for exact object matches, not name matches. </summary>
            <returns> true if tag is found; otherwise, false. </returns>
            <param name="tag"> The object to locate in this NbtCompound. May not be null. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tag"/> is null. </exception>
        </member>
        <member name="M:LibNbt.NbtCompound.CopyTo(LibNbt.NbtTag[],System.Int32)">
            <summary> Copies the tags of the NbtCompound to an array, starting at a particular array index. </summary>
            <param name="array"> The one-dimensional array that is the destination of the tag copied from NbtCompound.
            The array must have zero-based indexing. </param>
            <param name="arrayIndex"> The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="array"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> arrayIndex is less than 0. </exception>
            <exception cref="T:System.ArgumentException"> Given array is multidimensional; arrayIndex is equal to or greater than the length of array;
            the number of tags in this NbtCompound is greater than the available space from arrayIndex to the end of the destination array;
            or type NbtTag cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="M:LibNbt.NbtCompound.Remove(LibNbt.NbtTag)">
            <summary> Removes the first occurrence of a specific NbtTag from the NbtCompound.
            Looks for exact object matches, not name matches. </summary>
            <returns> true if tag was successfully removed from the NbtCompound; otherwise, false.
            This method also returns false if tag is not found. </returns>
            <param name="tag"> The tag to remove from the NbtCompound. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tag"/> is null. </exception>
            <exception cref="T:System.ArgumentException"> If the given tag is unnamed </exception>
        </member>
        <member name="M:LibNbt.NbtCompound.ToString">
            <summary> Returns a String that represents the current NbtCompound object and its contents.
            Format: TAG_Compound("Name"): { ...contents... } </summary>
            <returns> A String that represents the current NbtCompound object and its contents. </returns>
        </member>
        <member name="P:LibNbt.NbtCompound.TagType">
            <summary> Type of this tag (Compound). </summary>
        </member>
        <member name="P:LibNbt.NbtCompound.Item(System.String)">
            <summary> Gets or sets the tag with the specified name. May return null. </summary>
            <returns> The tag with the specified key. Null if tag with the given name was not found. </returns>
            <param name="tagName"> The name of the tag to get or set. Must match tag's actual name. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> is null, or if trying to assign null value. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="tagName"/> does not match the given tag's actual name. </exception>
        </member>
        <member name="P:LibNbt.NbtCompound.Count">
            <summary> Gets the number of tags contained in the NbtCompound. </summary>
            <returns> The number of tags contained in the NbtCompound. </returns>
        </member>
        <member name="T:LibNbt.NbtLong">
            <summary> A tag containing a single signed 64-bit integer. </summary>
        </member>
        <member name="M:LibNbt.NbtLong.#ctor">
            <summary> Creates an unnamed NbtLong tag with the default value of 0. </summary>
        </member>
        <member name="M:LibNbt.NbtLong.#ctor(System.Int64)">
            <summary> Creates an unnamed NbtLong tag with the given value. </summary>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:LibNbt.NbtLong.#ctor(System.String)">
            <summary> Creates an NbtLong tag with the given name and the default value of 0. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
        </member>
        <member name="M:LibNbt.NbtLong.#ctor(System.String,System.Int64)">
            <summary> Creates an NbtLong tag with the given name and value. </summary>
            <param name="tagName"> Name to assign to this tag. May be null. </param>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:LibNbt.NbtLong.ToString">
            <summary> Returns a String that represents the current NbtLong object.
            Format: TAG_Long("Name"): Value </summary>
            <returns> A String that represents the current NbtLong object. </returns>
        </member>
        <member name="P:LibNbt.NbtLong.TagType">
            <summary> Type of this tag (Long). </summary>
        </member>
        <member name="P:LibNbt.NbtLong.Value">
            <summary> Value/payload of this tag (a single signed 64-bit integer). </summary>
        </member>
        <member name="T:LibNbt.NbtFormatException">
            <summary> Exception thrown when a format violation is detected while parsing or saving an NBT file. </summary>
        </member>
    </members>
</doc>
